# Load "knitr", "grid",  "gridExtra", "ggplot2" and "lubridate" packages.
# Install the packages first if not installed yet
# Suppress the package warnings (Optional)
suppressWarnings(library(knitr))
suppressWarnings(library(gridExtra))
suppressWarnings(library(grid))
suppressWarnings(library(ggplot2))
suppressWarnings(library(lubridate))
library(knitr)
library(gridExtra)
library(grid)
library(ggplot2)
library(lubridate)
# Unzip the activity data file
unzip("activity.zip", exdir = "activity")
#Set the correct working directory
setwd("C:/Users/tiani_000/Desktop/courserarpogramming/RepData_PeerAssessment1/activity")
# download and read the data
data <- read.csv("activity.csv", colClasses = c("numeric", "Date", "numeric"))
#First few data in the file
head(data)
tnstpd <- aggregate(steps ~ date, data, FUN = sum)
#Let's put a label to this function to easily track it
tnstpd <- cbind(tnstpd, label = rep("with.na", nrow(tnstpd)))
# Plotting our first Histogram
library(ggplot2)
ggplot(tnstpd,aes(x = tnstpd$steps)) + geom_histogram(aes(fill=..count..), binwidth=500) + scale_fill_gradient("Frequency",low = "purple",high = "red") + labs(title = "Fig1: Histogram of Total Number of Steps Taken Each Day",x = "Number of Steps per day", y = "Frequency")
# print summary (includes mean & median)
summary(tnstpd)
# Calculated Mean and Median
Mean1 <- mean(tnstpd$steps)
print(Mean1)
Median1 <- median(tnstpd$steps)
print(Median1)
# Compute average number of steps per interval
gap <- aggregate(steps ~ interval, data, FUN = mean)
# Plotting our Time Series graph
dessin <- ggplot(gap, aes(x = interval, y = steps))
dessin + geom_line(color="purple", size=2) + xlab("5-minutes interval") + ylab("Average Number of Steps") + ggtitle("Fig2: TimeSeries-Daily Activity Pattern on Avg# of steps per 5mins interval")
# Caltucale which interval has the maximum number of steps
gap$interval[which.max(gap$steps)]
# total number of missing data from the original data set.
sum(is.na(data$steps))
##Let us first populate the missing values by replacing them with the mean value using the interval per days
##We will need to install and load the following packages for this section:
library(plyr)
library(dplyr)
imvdt <- adply(data, 1, function(x) if (is.na(x$steps)) {
x$steps = round(gap [gap$interval == x$interval, 2])
x
} else {
x
})
##add a label to track the information and Compute the total number of steps for missing values
tnstpd.impute <- aggregate(steps ~ date, imvdt, sum)
tnstpd.impute <- cbind(tnstpd.impute, label = rep("without.na", nrow(tnstpd.impute)))
##Plot the Histogram including the filled missing values
library(ggplot2)
ggplot(tnstpd.impute,aes(x = tnstpd.impute$steps)) + geom_histogram(aes(fill=..count..), binwidth=500) +scale_fill_gradient("Count",low = "purple",high = "green") + labs(title = "Fig3: Total Number of Steps with filled missing values",x = "Number of Steps per day", y = "Frequency")
##Calculating the corresponding mean and median
Mean2 <- mean(tnstpd.impute$steps)
print(Mean2)
Median2 <- median(tnstpd.impute$steps)
print(Median2)
summary(tnstpd.impute)
tnstpd$type <- as.factor("Original data with NA's")
tnstpd.impute$type <- as.factor("Reviewed data with imputed NA's")
tnstpd.all <- rbind(tnstpd, tnstpd.impute)
##Plot the combined histogram for comparison
ggplot(tnstpd.all , aes(steps, fill = type))+ theme(legend.title= element_blank())+ geom_bar(position= "dodge", binwidth= 1000)+ labs(title = "Fig4:Steps Taken per Day Histogram Comparison", x="Number of Daily Steps", y="Number of Days") + scale_fill_manual(values=c("red","darkgreen"))
#Displaying internal structure of created object
str(imvdt)
#Using the Lubridate package to make it easier to deal with the date range
library(lubridate)
#Using lubridate function "ymd" to  make the date function return numeric value
imvdt$date <- ymd(imvdt$date)
#Setting the weekday to return a value between 1and 7 with Sunday being #1 and Saturday being#7.
weekday_or_weekend <- ifelse(wday(imvdt$date) %in% c(1, 7), "weekend", "weekday")
poa <- data.frame(imvdt, weekday_or_weekend)
#aggregate the new data by steps as a function of interval per day
moyendesSteps <- aggregate(steps ~ weekday_or_weekend + interval, data = poa, mean)
library(ggplot2)
qplot(interval, steps, data = moyendesSteps, facets = weekday_or_weekend~.,
geom = "line", colour = I("gold"),fill = I("gold"), main="Fig5: Weekday vs. Weekend Average")
qplot(interval, steps, data = moyendesSteps, color = weekday_or_weekend, geom = "line",size=0.05, main="Fig6: Weekday vs. Weekend Average" )
